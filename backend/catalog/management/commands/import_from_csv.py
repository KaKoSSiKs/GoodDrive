"""
Management command –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π –∏–∑ CSV —Ñ–∞–π–ª–∞
–ü—Ä–æ—â–µ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —á–µ–º Excel, —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ
"""
from django.core.management.base import BaseCommand
from django.db import transaction
from catalog.models import Brand, Warehouse, Part, PartImage
import csv
import os
from decimal import Decimal, InvalidOperation


class Command(BaseCommand):
    help = '–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏ –∏–∑ CSV —Ñ–∞–π–ª–∞'
    
    def add_arguments(self, parser):
        parser.add_argument('file_path', type=str, help='–ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É')
        parser.add_argument(
            '--limit',
            type=int,
            default=100,
            help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—á–∞—Å—Ç–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞'
        )
    
    def handle(self, *args, **options):
        file_path = options['file_path']
        limit = options['limit']
        
        if not os.path.exists(file_path):
            self.stdout.write(self.style.ERROR(f'–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!'))
            return
        
        self.stdout.write(self.style.SUCCESS(f'–ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞: {file_path}'))
        
        # –°—á–µ—Ç—á–∏–∫–∏
        brands_created = 0
        warehouses_created = 0
        parts_created = 0
        images_created = 0
        errors = []
        
        with open(file_path, 'r', encoding='utf-8-sig') as f:
            reader = csv.DictReader(f, delimiter=';')
            
            with transaction.atomic():
                for row_num, row in enumerate(reader, start=2):
                    if row_num > limit + 1:
                        break
                    
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ (–ø–æ —Ä—É—Å—Å–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è–º –∫–æ–ª–æ–Ω–æ–∫)
                        title = row.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–µ', '').strip()
                        if not title:
                            continue
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –±—Ä–µ–Ω–¥
                        brand_name = row.get('–§–∏—Ä–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π').strip()
                        brand, created = Brand.objects.get_or_create(
                            name=brand_name,
                            defaults={'country': ''}
                        )
                        if created:
                            brands_created += 1
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–∫–ª–∞–¥
                        warehouse_name = row.get('–°–∫–ª–∞–¥ / —Ä–∞–∑–¥–µ–ª', '–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥').strip()
                        warehouse, created = Warehouse.objects.get_or_create(
                            name=warehouse_name,
                            defaults={'address': '–ù–µ —É–∫–∞–∑–∞–Ω'}
                        )
                        if created:
                            warehouses_created += 1
                        
                        # –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—ã (–∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É)
                        price_str = str(row.get('–æ–ø—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç', '0')).replace(',', '.')
                        price = self.parse_decimal(price_str, 0)
                        
                        # –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç—å
                        part, created = Part.objects.get_or_create(
                            title=title,
                            brand=brand,
                            defaults={
                                'label': row.get('–ú–µ—Ç–∫–∞', '').strip(),
                                'original_number': row.get('–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä', '').strip(),
                                'manufacturer_number': row.get('–ù–æ–º–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è', '').strip(),
                                'warehouse': warehouse,
                                'quantity': self.parse_int(row.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 0)),
                                'stock': self.parse_int(row.get('–û—Å—Ç–∞—Ç–æ–∫', 0)),
                                'reserve': self.parse_int(row.get('–†–µ–∑–µ—Ä–≤', 0)),
                                'available': max(0, self.parse_int(row.get('–î–æ—Å—Ç—É–ø–Ω–æ', 0))),
                                'price_opt': price,
                                'description': '',
                                'is_active': True
                            }
                        )
                        
                        if created:
                            parts_created += 1
                            
                            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            PartImage.objects.create(
                                part=part,
                                image_url='https://via.placeholder.com/600x600/2563EB/FFFFFF?text=Auto+Part',
                                alt_text=title,
                                order_index=0
                            )
                            images_created += 1
                        
                        if row_num % 10 == 0:
                            self.stdout.write(f'–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {row_num}')
                        
                    except Exception as e:
                        error_msg = f'–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {row_num}: {str(e)}'
                        errors.append(error_msg)
                        if len(errors) <= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
                            self.stdout.write(self.style.ERROR(error_msg))
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stdout.write(self.style.SUCCESS('\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!'))
        self.stdout.write(self.style.SUCCESS(f'üì¶ –ë—Ä–µ–Ω–¥–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {brands_created}'))
        self.stdout.write(self.style.SUCCESS(f'üè¢ –°–∫–ª–∞–¥–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {warehouses_created}'))
        self.stdout.write(self.style.SUCCESS(f'üîß –ê–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π —Å–æ–∑–¥–∞–Ω–æ: {parts_created}'))
        self.stdout.write(self.style.SUCCESS(f'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω–æ: {images_created}'))
        
        if errors:
            self.stdout.write(self.style.ERROR(f'\n‚ö†Ô∏è –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {len(errors)}'))
    
    def parse_int(self, value, default=0):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ integer"""
        if value is None or value == '':
            return default
        try:
            if isinstance(value, (int, float)):
                return int(value)
            return int(str(value).strip())
        except (ValueError, AttributeError):
            return default
    
    def parse_decimal(self, value, default=0):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ Decimal"""
        if value is None or value == '':
            return default
        try:
            if isinstance(value, Decimal):
                return value
            return Decimal(str(value).strip().replace(',', '.'))
        except (ValueError, InvalidOperation):
            return default
